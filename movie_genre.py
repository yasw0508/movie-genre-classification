# -*- coding: utf-8 -*-
"""movie genre.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QyTljaBh9_hOtb9FfYe7ldES0on8v9ZK
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score

nltk.download('stopwords')
nltk.download('punkt')

# Sample dataset
data = {
    'movie_description': [
        'A space adventure with aliens and spaceships',
        'A romantic comedy about love and relationships',
        'A thrilling mystery with detectives and suspense',
        'A horror story with ghosts and haunted houses',
        'A superhero movie with action and battles'
    ],
    'genre': ['Sci-Fi', 'Romance', 'Mystery', 'Horror', 'Action']
}

"""# Feature Extraction
vectorizer = TfidfVectorizer(max_features=5000)
X = vectorizer.fit_transform(df['cleaned_plot'])
y = df['genre']
"""

# Convert to DataFrame
df = pd.DataFrame(data)

# Text vectorization using TF-IDF
from sklearn.feature_extraction.text import TfidfVectorizer # Make sure TfidfVectorizer is imported in this cell
tfidf = TfidfVectorizer()  # Now TfidfVectorizer should be accessible

# Re-define the DataFrame in this cell or make sure it's accessible from previous cells
import pandas as pd
data = {
    'movie_description': [
        'A space adventure with aliens and spaceships',
        'A romantic comedy about love and relationships',
        'A thrilling mystery with detectives and suspense',
        'A horror story with ghosts and haunted houses',
        'A superhero movie with action and battles'
    ],
    'genre': ['Sci-Fi', 'Romance', 'Mystery', 'Horror', 'Action']
}
df = pd.DataFrame(data) # defines df

X = tfidf.fit_transform(df['movie_description']) # df is now defined
y = df['genre']

# Split data into training and testing sets
from sklearn.model_selection import train_test_split # Import train_test_split in this cell
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Logistic Regression model
from sklearn.linear_model import LogisticRegression # Import LogisticRegression in this cell
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluation
# Evaluation
from sklearn.metrics import accuracy_score, classification_report # Import accuracy_score and classification_report here
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))